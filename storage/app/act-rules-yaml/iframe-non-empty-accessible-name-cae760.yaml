id: cae760
name: 'Iframe element has non-empty accessible name'
metadata:
    id: cae760
    name: 'Iframe element has non-empty accessible name'
    rule_type: atomic
    description: "This rule checks that each `iframe` element has a non-empty accessible name.\n"
    accessibility_requirements: { 'wcag20:4.1.2': { forConformance: true, failed: 'not satisfied', passed: 'further testing needed', inapplicable: 'further testing needed' } }
    input_aspects: ['DOM Tree', 'CSS Styling']
    acknowledgments: { authors: ['Jey Nandakumar', 'Tom Brunet', 'Wilco Fiers'], funding: [WAI-Tools] }
applicability: "This rule applies to `iframe` elements that are included in the accessibility tree except if at least one of the following is true:\n\n- the `iframe` has a negative `tabindex` attribute value; or\n- the `iframe` is marked as decorative."
assumptions: 'If an `iframe` is not perceived by the user as a single control, it does not qualify as a user interface component under WCAG 2. In such a scenario, failing this rule would not fail success criterion 4.1.2](https://www.w3.org/TR/WCAG22/#name-role-value). Unless the `iframe` is both removed from the accessibility tree and removed from [sequential focus navigation, they usually are considered to be user interface components.'
accessibility_support: "- Browser and assistive technology support for `iframe` elements is currently **inconsistent**. Some examples of inconsistencies include (but are not limited to):\n  - There is a known combination of a popular browser and assistive technology that ignores `aria-label` and only announces `title` attribute as an accessible name\n  - Some assistive technologies ignore empty `iframe` elements, regardless of if they are focusable or if they have an accessible name.\n  - Some browsers instantly redirect focus from `iframe` elements to the first focusable element inside that iframe. This redirect makes it appear as though the `iframe` never receives focus. This occurs even if the `iframe` has a non-negative `tabindex` attribute value.\n  - Not all browsers redirect focus on `iframe` elements. This ensures that the contents of `iframe` elements can be scrolled and accessed by using the keyboard. This must not be circumvented by using a negative tabindex, as this will make the `iframe` completely inaccessible for keyboard navigation."
background: "The `frame` element is deprecated, this rule does not consider `frame` or `frameset` elements.\n\nDue to inconsistencies in handling focus on `iframe`, this rule ignores `iframe` elements for which there is an attempt to hide them from assistive technologies. Whether `iframe` elements that are inapplicable to this rule still require an accessible name varies between browsers.\n\n### Bibliography\n\n- [H64: Using the title attribute of the frame and iframe elements](https://www.w3.org/WAI/WCAG22/Techniques/html/H64)\n- [Understanding Success Criterion 4.1.2](https://www.w3.org/WAI/WCAG22/Understanding/name-role-value.html)\n- User interface component"
test_cases:
    passed: [{ name: 'Passed Example 1', description: 'This `iframe` element gets its accessible name from the `title` attribute.', html: '<iframe title="Grocery List" src="/test-assets/SC4-1-2-frame-doc.html"> </iframe>' }, { name: 'Passed Example 2', description: 'This `iframe` element gets its accessible name from the `aria-label` attribute.', html: '<iframe aria-label="Grocery list" src="/test-assets/SC4-1-2-frame-doc.html"> </iframe>' }, { name: 'Passed Example 3', description: 'This `iframe` element gets its accessible name from the content of the `div` referenced with the `aria-labelledby` attribute.', html: "<div id=\"frame-title-helper\">Grocery List</div>\n<iframe aria-labelledby=\"frame-title-helper\" src=\"/test-assets/SC4-1-2-frame-doc.html\"> </iframe>" }]
    failed: [{ name: 'Failed Example 1', description: 'This `iframe` element has an empty (`""`) accessible name. The `name` attribute is not used in computing the accessible name of `iframe` elements.', html: '<iframe name="Grocery List" src="/test-assets/SC4-1-2-frame-doc.html"> </iframe>' }, { name: 'Failed Example 2', description: 'This `iframe` element has no attributes that would give it a non-empty (`""`) accessible name.', html: '<iframe src="/test-assets/SC4-1-2-frame-doc.html"> </iframe>' }, { name: 'Failed Example 3', description: 'This `iframe` element has an empty (`""`) accessible name because the `title` attribute has an empty string as its value.', html: '<iframe title="" src="/test-assets/SC4-1-2-frame-doc.html"> </iframe>' }, { name: 'Failed Example 4', description: 'This `iframe` element has an empty (`""`) accessible name because the `title` attribute value is trimmed of whitespace by the accessible name computation.', html: '<iframe title=" " src="/test-assets/SC4-1-2-frame-doc.html"> </iframe>' }]
    inapplicable: [{ name: 'Inapplicable Example 1', description: 'This page has no `iframe` element.', html: '<button>take me somewhere</button>' }, { name: 'Inapplicable Example 2', description: 'This `iframe` is not included in the accessibility tree because of setting a style of `display: none;`.', html: '<iframe style="display:none;" src="/test-assets/SC4-1-2-frame-doc.html"></iframe>' }, { name: 'Inapplicable Example 3', description: 'This `iframe` element has a negative `tabindex` attribute value.', html: '<iframe tabindex="-1" src="/test-assets/SC4-1-2-frame-doc.html" style="height: 250px"> </iframe>' }, { name: 'Inapplicable Example 4', description: 'This `iframe` element has an explicit semantic role of `none`.', html: '<iframe src="/test-assets/SC4-1-2-frame-doc.html" role="none"> </iframe>' }]
expectation: 'Each target element has an accessible name that is not empty (`""`).'
