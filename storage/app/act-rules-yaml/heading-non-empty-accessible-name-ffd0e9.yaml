machine_name: heading-non-empty-accessible-name-ffd0e9
id: ffd0e9
name: 'Heading has non-empty accessible name'
metadata:
    id: ffd0e9
    name: 'Heading has non-empty accessible name'
    rule_type: atomic
    description: "This rule checks that each heading has a non-empty accessible name.\n"
    accessibility_requirements: { 'aria12:namecalculation': { title: 'ARIA 1.2,5.2.8 Accessible Name Calculation', forConformance: true, failed: 'not satisfied', passed: 'further testing needed', inapplicable: 'further testing needed' } }
    input_aspects: ['Accessibility Tree', 'DOM Tree', 'CSS Styling']
    acknowledgments: { authors: ['Jean-Yves Moyen', 'Wilco Fiers'], funding: [WAI-Tools] }
applicability: 'This rule applies to any HTML element that is a semantic `heading`, included in the accessibility tree.'
assumptions: 'There are no assumptions.'
accessibility_support: "- Some assistive technologies may hide headings with empty accessible name from the users. This depends on the user agent, on how the accessible name was computed (the accessible name and description computation is not clear concerning which characters should be trimmed), and on the assistive technology itself. Hence, there are cases where the outcome of this rule is _failed_, but users of certain assistive technology and browser combinations will not experience an issue.\n\n- Implementation of Presentational Roles Conflict Resolution varies from one browser or assistive technology to another. Depending on this, some semantic `heading` elements can fail this rule with some technology but users of other technologies would not experience any accessibility issue because the same elements would have a semantic role of `presentation` and be hidden for these users.\n\n- The accessible name and description computation suggests that if an `aria-labelledby` attribute refers to an existing but empty element, the computation should stop and return an empty name without defaulting to the next steps. Several user agents and assistive technologies chose to use the next step in the computation in this case (ultimately defaulting to the content)."
background: "Completely empty headings (e.g., `<h1></h1>`) seem to be consistently ignored by assistive technologies. However, they fail Technique H42: Using h1-h6 to identify headings (by using heading markup for content which is not heading). Moreover, they may be rendered on screen (by breaking flow content, or because of custom styling), thus causing concerns for sighted users. Therefore, this rule also fails on these.\n\n### Bibliography\n\n- Understanding Success Criterion 1.3.1: Info and Relationships\n- Technique H42: Using h1-h6 to identify headings"
test_cases:
    passed: [{ name: 'Passed Example 1', description: 'This `h1` element has a non-empty accessible name.', html: '<h1>ACT rules</h1>' }, { name: 'Passed Example 2', description: 'This `div` element with a semantic role of `heading` has a non-empty accessible name.', html: '<div role="heading" aria-level="1">ACT rules</div>' }, { name: 'Passed Example 3', description: 'This `h1` element has a non-empty accessible name given by its `aria-labelledby` attribute.', html: "<span id=\"h-name\" hidden>ACT rules</span>\n<h1 aria-labelledby=\"h-name\">Learn about ACT rules</h1>" }, { name: 'Passed Example 4', description: 'This `h1` element has a non-empty accessible name given by the `alt` attribute of its content.', html: '<h1><img src="/test-assets/shared/act-logo.png" alt="ACT rules" /></h1>' }, { name: 'Passed Example 5', description: 'This `h1` element is not visible, but is still included in the accessibility tree. It has a non-empty accessible name.', html: '<h1 style="position: absolute; top: -9999px">ACT rules</h1>' }]
    failed: [{ name: 'Failed Example 1', description: 'This `h1` element has an empty accessible name because its content is not exposed to assistive technologies.', html: '<h1><img src="/test-assets/shared/act-logo.png" alt="" /></h1>' }, { name: 'Failed Example 2', description: 'This `h1` element has an empty accessible name given by its `aria-label` attribute. Its content is not exposed to assistive technologies, thus preventing the accessible name to default to the content.', html: '<h1 aria-label=""><span aria-hidden="true">ACT rules</span></h1>' }, { name: 'Failed Example 3', description: 'This `h1` element has an empty accessible name given by its `aria-labelledby` attribute. Its content is not exposed to assistive technologies, thus preventing the accessible name to default to the content.', html: "<span id=\"h-name\" hidden></span>\n<h1 aria-labelledby=\"h-name\"><span aria-hidden=\"true\">ACT rules</span></h1>" }, { name: 'Failed Example 4', description: 'This `h1` element has an empty accessible name because the `img` element has a semantic role of `presentation`, and thus does not provide an accessible name to the `h1` element. Note that the `alt` attribute does not trigger Presentational Roles Conflict Resolution because it is not an ARIA attribute.', html: '<h1><img src="/test-assets/shared/act-logo.png" alt="ACT rules" role="presentation" /></h1>' }, { name: 'Failed Example 5', description: 'This `h1` element has an empty accessible name because the spaces and line break are trimmed by accessible name computation.', html: '<h1><br /></h1>' }, { name: 'Failed Example 6', description: 'This `h1` element has an empty accessible name. It is nonetheless rendered by breaking the flow content, resulting in a confusing situation for sighted users.', html: "<span>Hello</span>\n<h1></h1>\n<span>World!</span>" }, { name: 'Failed Example 7', description: 'This `div` element with a semantic role of `heading` has an empty accessible name (and content). It is nonetheless rendered due to its styling, resulting in a confusing situation for sighted users.', html: '<div role="heading" aria-level="1" style="border-style: solid"></div>' }, { name: 'Failed Example 8', description: 'This `h1` element has an explicit role of `none`. However, the global property `aria-label` is specified. Thus it has a semantic role of `heading` due to Presentational Roles Conflict Resolution. It has an empty accessible name given by its `aria-label` attribute and the lack of accessible content to fallback to.', html: '<h1 aria-label="" role="none"><span aria-hidden="true">ACT rules</span></h1>' }]
    inapplicable: [{ name: 'Inapplicable Example 1', description: 'There is no semantic `heading` element.', html: '<div></div>' }, { name: 'Inapplicable Example 2', description: 'This `h1` element is not included in the accessibility tree.', html: '<h1 aria-hidden="true"></h1>' }]
expectation: 'Each test target has a non-empty (`""`) accessible name.'
