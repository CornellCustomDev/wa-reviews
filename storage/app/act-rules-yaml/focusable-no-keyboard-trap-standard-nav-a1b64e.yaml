machine_name: focusable-no-keyboard-trap-standard-nav-a1b64e
id: a1b64e
name: 'Focusable element has no keyboard trap via standard navigation'
metadata:
    id: a1b64e
    name: 'Focusable element has no keyboard trap via standard navigation'
    rule_type: atomic
    description: "This rule checks if it is possible to use standard keyboard navigation to navigate through all content on a web page without becoming trapped in any element.\n"
    accessibility_requirements: null
    input_aspects: ['DOM Tree', 'CSS Styling']
    acknowledgments: { authors: ['Anne Thyme Nørregaard', 'Carlos Duarte', 'Dagfinn Rømen', 'Geir Sindre Fossøy', 'Malin Øvrebø', 'Shadi Abou-Zahra', 'Stein Erik Skotkjerra'], funding: [WAI-Tools] }
applicability: 'This rule applies to any HTML or SVG element that is focusable.'
assumptions: "- The focus order in keyboard navigation is cyclical, not linear, meaning that the focus order will cycle to the first/last element when it moves away from the last/first element.\n- The Browser UI is part of the focus navigation cycle of the page."
accessibility_support: 'There are no accessibility support issues known.'
background: "This rule only requires navigation in one direction (either forward or backward), not both, and not a specific one. It is clear that not being able to escape a focus trap in any direction is a failure of Success Criterion 2.1.2 No keyboard trap. However, it is less clear that being able to escape in only one direction is enough to satisfy it. If Success Criterion 2.1.2 No keyboard trap requires the possibility to escape the trap in a specific way (e.g. forward [standard keyboard navigation](#standard-keyboard-navigation)) or in both directions, this rule may pass while the criterion is not satisfied.\n\n### Bibliography\n\n- [Understanding Success Criterion 2.1.2: No Keyboard Trap](https://www.w3.org/WAI/WCAG22/Understanding/no-keyboard-trap.html)\n- [G21: Ensuring that users are not trapped in content](https://www.w3.org/WAI/WCAG22/Techniques/general/G21)\n- [F10: Failure of Success Criterion 2.1.2 and Conformance Requirement 5 due to combining multiple content formats in a way that traps users inside one format type](https://www.w3.org/WAI/WCAG22/Techniques/failures/F10)"
test_cases:
    passed: [{ name: 'Passed Example 1', description: 'These focusable elements do not create a trap for keyboard navigation.', html: '<a href="#">Link 1</a> <button>Button1</button>' }, { name: 'Passed Example 2', description: 'This element is made focusable by the `tabindex` attribute. It does not create a trap for keyboard navigation.', html: '<div tabindex="1">Text</div>' }, { name: 'Passed Example 3', description: 'This element is made focusable by the `tabindex` attribute, even if it is not part of the sequential focus navigation. It does not create a trap for keyboard navigation.', html: '<div tabindex="-1">Text</div>' }]
    failed: [{ name: 'Failed Example 1', description: 'This focusable element creates a keyboard trap bringing focus to the `button`. Note that if one of the links is removed, the focus may jump to the browser UI before the timeout expires, at which point the `this.focus()` trap cannot trigger anymore.', html: "<a href=\"#\">Link 1</a>\n<button onblur=\"setTimeout(() => this.focus(), 10)\">\n\tButton1\n</button>\n<a href=\"#\">Link 2</a>" }, { name: 'Failed Example 2', description: 'These focusable `button` elements create a keyboard trap preventing the last `button` to be reached using the keyboard.', html: "<button onblur=\"setTimeout(() => this.nextElementSibling.focus(), 10)\">\n\tButton1\n</button>\n<button onblur=\"setTimeout(() => this.previousElementSibling.focus(), 10)\">\n\tButton2\n</button>\n<button>\n\tButton3\n</button>" }, { name: 'Failed Example 3', description: 'This `button` element is between other `button` elements creating keyboard traps.', html: "<button onblur=\"setTimeout(() => this.focus(), 10)\">Button 1</button>\n<button>Button 2</button>\n<button onblur=\"setTimeout(() => this.focus(), 10)\">Button 3</button>" }]
    inapplicable: [{ name: 'Inapplicable Example 1', description: 'There is no focusable element.', html: '<h1>Page 1</h1>' }, { name: 'Inapplicable Example 2', description: 'There is no focusable element.', html: '<button type="button" disabled>Click Me!</button>' }, { name: 'Inapplicable Example 3', description: 'There is no focusable element.', html: '<button type="button" style="display:none;">Click Me!</button>' }, { name: 'Inapplicable Example 4', description: 'There is no focusable element.', html: '<a href="#" style="visibility:hidden;">Link 1</a> <button style="visibility:hidden;">Button1</button>' }]
expectation: "For each target element, focus can cycle to the browser UI by using [standard keyboard navigation](#standard-keyboard-navigation).\n\n**Note:** It is not possible to fulfill this expectation by using browser specific shortcuts to return to the browser UI."
