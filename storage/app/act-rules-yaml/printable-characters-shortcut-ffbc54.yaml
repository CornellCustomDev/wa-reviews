id: ffbc54
name: 'No keyboard shortcut uses only printable characters'
metadata:
    id: ffbc54
    name: 'No keyboard shortcut uses only printable characters'
    rule_type: atomic
    description: "This rule checks that if keyboard shortcuts are implemented using only printable characters, then there is a mechanism to disable the shortcut, or to remap the shortcut to use one or more non-printable character keys, or the shortcut for a user interface component is only available when that component has focus.\n"
    accessibility_requirements: { 'wcag21:2.1.4': { forConformance: true, failed: 'not satisfied', passed: satisfied, inapplicable: 'further testing needed' } }
    input_aspects: ['DOM Tree']
    acknowledgments: { authors: ['Carlos Duarte', 'Jo√£o Vicente'], funding: [WAI-Tools] }
applicability: "This rule applies to any keyboard event for which all of the following is true:\n\n- the event's attribute `key` is a printable character key; and\n- the event's method `getModifierState` returns `false` for each of the valid modifier keys; and\n- the event causes changes in the content of the HTML document."
assumptions: "- If there are ways to disable the result of keyboard events that do not require the user to interact with the web page (e.g. a setting at the operating system level), failing this rule might not be a failure of the success criterion.\n- After being disabled, the event remains disabled until being re-enabled again. If the event is re-enabled through other non-user controlled means (e.g. a timeout) then this rule may pass while Success Criterion 2.1.4: Character Key Shortcuts is not satisfied."
accessibility_support: 'Currently keyboard events only support the types `keydown` and `keyup`. Keyboard events of type `keypressed` are considered legacy keyboard events and are thus ignored by this rule.'
background: "The instruments used to pass this rule (if any), must meet all level A Success Criteria in order to fully satisfy Success Criterion 2.1.4: Character Key Shortcuts. These extra requirements are left out of this rule, and should be tested separately.\nThis rule allows changes to the content when a user interface component](https://www.w3.org/TR/WCAG22/#dfn-user-interface-components) has focus to meet the \"Active only on focus\" requirement from [Success Criterion 2.1.4. As explained in the Event dispatch and DOM event flow section](https://www.w3.org/TR/uievents/#event-flow) of the [UI Events Working Draft](https://www.w3.org/TR/uievents/), each [keyboard event is dispatched to an event target. The event target is the element that has focus. As such, the \"Active only on focus\" requirement from Success Criterion 2.1.4 is implied by saying that the event target is an inheriting semantic `widget`.\n\nThe \"Turn off\" and \"Remap\" requirements from Success Criterion 2.1.4 are combined in the **disable/remap** item of the Expectation section. For the disable requirement, changes in content that are made through keyboard events with a printable character value for the `key` attribute and a `getModifierState` return value of `false` for each of the valid modifier keys effectively need to be blocked (in other words, turned off or disabled). The remap requirement unblocks the events if the `getModifierState` query returns `true` for at least one of the valid modifier keys. Once the `getModifierState` returns `true` for at least one of the valid modifier keys of a keyboard event, such keyboard event is no longer applicable for the rule and it passes the \"Remap\" requirement from Success Criterion 2.1.4.\n\n### Bibliography\n\n- Understanding Success Criterion 2.1.4: Character Key Shortcuts\n- [G217 Providing a mechanism to allow users to remap or turn off character key shortcuts](https://www.w3.org/WAI/WCAG22/Techniques/general/G217)\n- [F99 Failure of Success Criterion 2.1.4 due to implementing character key shortcuts that cannot be turned off or remapped](https://www.w3.org/WAI/WCAG22/Techniques/failures/F99)"
test_cases:
    passed: [{ name: 'Passed Example 1', description: 'This HTML document is listening to keyboard events for which the attribute `key` is a printable character and the method `getModifierState` returns `false`, and which cause changes in content. There exists an instrument to disable the keyboard event so that same key events are blocked unless `getModifierState("Control")` returns `true`, therefore meeting the **disable/remap** expectation.', html: "<html>\n\t<head>\n\t\t<title>Passed Example 1</title>\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\t<body onload=\"registerShortcut({id: 'singleShortcut', shortcutKey: '+'}); activateShortcuts();\">\n\t\t<label for=\"target\">Add to list (press \"+\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<div>\n\t\t\t<div>Remap shortcut</div>\n\t\t\t<div>\n\t\t\t\t<label>\n\t\t\t\t\t<input id=\"remap\" type=\"checkbox\" onclick=\"toggleModifier('singleShortcut', this.checked)\" />\n\t\t\t\t\tUse \"ctrl\" key together with the \"+\" key\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t</div>\n\t\t<br />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }, { name: 'Passed Example 2', description: 'This HTML document is listening to keyboard events for which the attribute `key` is a printable character and the method `getModifierState` returns `false`, and which cause changes in content. There exists an instrument to **disable** the keyboard event. A disabled event implies that the event is disabled when the `getModifierState` method returns `false`.', html: "<html>\n\t<head>\n\t\t<title>Passed Example 2</title>\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\t<body onload=\"registerShortcut({id: 'singleShortcut', shortcutKey: '+'}); activateShortcuts();\">\n\t\t<label for=\"target\">Add to list (press \"+\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<label>\n\t\t\t<input type=\"checkbox\" onclick=\"toggleDisabled('singleShortcut', !this.checked)\" checked />\n\t\t\tToggle single character keyboard shortcut\n\t\t</label>\n\t\t<br />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }, { name: 'Passed Example 3', description: 'This HTML document is listening to keyboard events for which the attribute `key` is a printable character and the method `getModifierState` returns `false`, and which cause changes in content. For each keyboard event causing changes in content, there exists an instrument to disable it so that same key events are blocked unless `getModifierState("Control")` returns `true`, therefore meeting the **disable/remap** expectation.', html: "<html>\n\t<head>\n\t\t<title>Passed Example 3</title>\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\t<body\n\t\tonload=\"registerShortcut({id: 'firstShortcut', shortcutKey: '+'}); registerShortcut({id: 'secondShortcut', shortcutKey: 'a'}); activateShortcuts();\"\n\t>\n\t\t<label for=\"target\">Add to list (press \"+\" or \"a\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<div>\n\t\t\t<div>Remap shortcut</div>\n\t\t\t<div>\n\t\t\t\t<label>\n\t\t\t\t\t<input id=\"remap1\" type=\"checkbox\" onclick=\"toggleModifier('firstShortcut', this.checked)\" />\n\t\t\t\t\tUse \"ctrl\" key together with the \"+\" key\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t<input id=\"remap2\" type=\"checkbox\" onclick=\"toggleModifier('secondShortcut', this.checked)\" />\n\t\t\t\t\tUse \"ctrl\" key together with the \"a\" key\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t</div>\n\t\t<br />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }, { name: 'Passed Example 4', description: 'This HTML document is listening to keyboard events for which the attribute `key` is a printable character and the method `getModifierState` returns `false`, and which cause changes in content. There exists an instrument to **disable** those keyboard events that cause changes in content so that same key events are blocked unless `getModifierState("Control")` returns `true`. In this example, the same instrument is used to **remap** all keyboard events.', html: "<html>\n\t<head>\n\t\t<title>Passed Example 4</title>\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\t<body\n\t\tonload=\"registerShortcut({id: 'firstShortcut', shortcutKey: '+'}); registerShortcut({id: 'secondShortcut', shortcutKey: 'a'}); activateShortcuts();\"\n\t>\n\t\t<label for=\"target\">Add to list (press \"+\" or \"a\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<div>\n\t\t\t<div>Remap shortcut</div>\n\t\t\t<div>\n\t\t\t\t<label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"remap\"\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tonclick=\"toggleModifier('firstShortcut', this.checked); toggleModifier('secondShortcut', this.checked);\"\n\t\t\t\t\t/>\n\t\t\t\t\tUse \"ctrl\" key together with the \"+\" or \"a\" key\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t</div>\n\t\t<br />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }, { name: 'Passed Example 5', description: 'This HTML document is listening to keyboard events for which the attribute `key` is a printable character and the method `getModifierState` returns `false`, and which cause changes in content, but the events are blocked when no `widget` has focus.', html: "<html>\n\t<head>\n\t\t<title>Passed Example 5</title>\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\n\t<body onload=\"registerShortcut({shortcutKey: '+', focusOnly: true}); activateShortcuts();\">\n\t\t<label for=\"target\">Add to list (press \"+\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<br />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }, { name: 'Passed Example 6', description: 'This HTML document is listening to keyboard events for which the attribute `key` is a printable character and the method `getModifierState` returns `false`, and which cause changes in content. There exists a set of clearly labeled instruments to **disable** or to **remap** the keyboard event so that same key events are blocked unless `getModifierState("Control")` returns `true`.', html: "<html>\n\t<head>\n\t\t<title>Passed Example 6</title>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"/test-assets/ffbc54/styles.css\" />\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\t<body onload=\"registerShortcut({id: 'singleShortcut', shortcutKey: '+'}); activateShortcuts();\">\n\t\t<div id=\"overlay\">\n\t\t\t<p>Disable/remap shortcut</p>\n\t\t\t<label>\n\t\t\t\t<input type=\"checkbox\" onclick=\"toggleDisabled('singleShortcut', !this.checked)\" checked />\n\t\t\t\tToggle single character keyboard shortcut\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\t<input id=\"remap\" type=\"checkbox\" onclick=\"toggleModifier('singleShortcut', this.checked)\" />\n\t\t\t\tUse \"ctrl\" key together with the \"+\" key\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<button onclick=\"closeModal();\">Dismiss</button>\n\t\t</div>\n\t\t<p>To control the shortcuts activate the \"Control shortcuts\" button.</p>\n\t\t<input type=\"button\" onclick=\"openModal()\" value=\"Control shortcuts\" />\n\n\t\t<label for=\"target\">Add to list (press \"+\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }]
    failed: [{ name: 'Failed Example 1', description: 'This HTML document is listening to keyboard events for which the attribute `key` is a printable character and the method `getModifierState` returns `false`, and which cause changes in content. There is no instrument to **disable** or **remap** the keyboard event and the keyboard events are not blocked when no `widget` has focus.', html: "<html>\n\t<head>\n\t\t<title>Failed Example 1</title>\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\t<body onload=\"registerShortcut({shortcutKey: '+', disabled: false}); activateShortcuts();\">\n\t\t<label for=\"target\">Add to list (press \"+\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<br />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }, { name: 'Failed Example 2', description: 'This HTML document is listening to keyboard events for which the attribute `key` is a printable character and the method `getModifierState` returns `false`, and which cause changes in content. There is an instrument to **disable** or **remap** the keyboard event so that same key events are blocked unless `getModifierState("Control")` returns `true`, but the instrument is not in a clearly labeled location.', html: "<html>\n\t<head>\n\t\t<title>Failed Example 2</title>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"/test-assets/ffbc54/styles.css\" />\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\t<body onload=\"registerShortcut({id: 'singleShortcut', shortcutKey: '+'}); activateShortcuts();\">\n\t\t<div id=\"overlay\">\n\t\t\t<p>Disable/remap shortcut</p>\n\t\t\t<label>\n\t\t\t\t<input type=\"checkbox\" onclick=\"toggleDisabled('singleShortcut', !this.checked)\" checked />\n\t\t\t\tToggle single character keyboard shortcut\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<label>\n\t\t\t\t<input id=\"remap\" type=\"checkbox\" onclick=\"toggleModifier('singleShortcut', this.checked)\" />\n\t\t\t\tUse \"ctrl\" key together with the \"+\" key\n\t\t\t</label>\n\t\t\t<br />\n\t\t\t<button onclick=\"closeModal();\">Dismiss</button>\n\t\t</div>\n\n\t\t<input type=\"button\" onclick=\"openModal()\" value=\"Open modal\" />\n\n\t\t<label for=\"target\">Add to list (press \"+\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }]
    inapplicable: [{ name: 'Inapplicable Example 1', description: "This HTML document has a keyboard event dispatched to an event target but it only causes changes in content if the event's attribute `key` is not a printable character (in this example, the Escape key).", html: "<html>\n\t<head>\n\t\t<title>Inapplicable Example 1</title>\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\n\t<body onload=\"registerShortcut({shortcutKey: 'Escape'}); activateShortcuts();\">\n\t\t<label for=\"target\">Add to list (press \"esc\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<br />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }, { name: 'Inapplicable Example 2', description: 'This HTML document has a keyboard event dispatched to an event target with the attribute `key` being a printable character but it does not cause changes in content unless the `getModifierState` returns `true`.', html: "<html>\n\t<head>\n\t\t<title>Inapplicable Example 2</title>\n\t\t<script src=\"/test-assets/ffbc54/shortcut.js\"></script>\n\t</head>\n\n\t<body onload=\"registerShortcut({shortcutKey: '+', ctrlKey: true}); activateShortcuts();\">\n\t\t<label for=\"target\">Add to list (press \"ctrl\" and \"+\" to add):</label>\n\t\t<input type=\"text\" id=\"target\" />\n\t\t<br />\n\t\t<div>\n\t\t\tTo do list\n\t\t</div>\n\t\t<ul id=\"list\"></ul>\n\t</body>\n</html>" }]
expectation: "For each test target at least one of the following is true:\n\n- **disable/remap**: there is at least one set of clearly labeled instruments to block events that use the same key as the test target and whose `getModifierState` method returns `false` for each of the valid modifier keys; or\n- **focus**: the event target is an inheriting semantic `widget`."
